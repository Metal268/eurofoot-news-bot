import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import asyncio
import requests

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = "7974946517:AAEnAdGn4svTzfia2djygBTwSWYP2SHK8nw"
CHANNEL_USERNAME = "@fiveleagues"
APPROVER_ID = 8142520596  # –¢–≤—ñ–π Telegram user ID

# === –õ–æ–≥–∏ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —á–µ—Ä–≥ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ===
pending_posts = {}

# === –§—É–Ω–∫—Ü—ñ—è: –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å—Ç—É –∞–¥–º—ñ–Ω—É –Ω–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ===
async def send_for_approval(bot: Bot, text: str, photo_url: str | None = None):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="approve"),
         InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data="reject")]
    ])
    if photo_url:
        message = await bot.send_photo(
            chat_id=APPROVER_ID,
            photo=photo_url,
            caption=text,
            reply_markup=keyboard
        )
    else:
        message = await bot.send_message(
            chat_id=APPROVER_ID,
            text=text,
            reply_markup=keyboard
        )
    pending_posts[message.message_id] = {
        "text": text,
        "photo": photo_url
    }

# === –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = pending_posts.get(query.message.message_id)
    if not data:
        await query.edit_message_reply_markup(reply_markup=None)
        return

    if query.data == "approve":
        if data["photo"]:
            await context.bot.send_photo(chat_id=CHANNEL_USERNAME, photo=data["photo"], caption=data["text"])
        else:
            await context.bot.send_message(chat_id=CHANNEL_USERNAME, text=data["text"])
        await query.edit_message_caption(caption=f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ:\n\n{data['text']}")
    elif query.data == "reject":
        await query.edit_message_caption(caption="‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
    pending_posts.pop(query.message.message_id, None)

# === –§—É–Ω–∫—Ü—ñ—è: —ñ–º—ñ—Ç–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏ (–ø—Ä–∏–∫–ª–∞–¥) ===
async def post_news_periodically(app: Application):
    await asyncio.sleep(10)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –∑–∞–ø—É—Å–∫–æ–º
    while True:
        # ‚ùó –¢—É—Ç –º–∞—î –±—É—Ç–∏ —Ç–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–µ—Ä –∞–±–æ API-–¥–∂–µ—Ä–µ–ª–æ
        fake_news = {
            "text": "üî¥ –ê—Ä—Å–µ–Ω–∞–ª –ø—ñ–¥–ø–∏—Å–∞–≤ –ù–æ–Ω—ñ –ú–∞–¥—É–µ–∫–µ! –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ 5 —Ä–æ–∫—ñ–≤, —Å—É–º–∞ ‚Äî ¬£52 –º–ª–Ω.",
            "photo": "https://pbs.twimg.com/media/ExamplePhoto.jpg"
        }
        await send_for_approval(app.bot, text=fake_news["text"], photo_url=fake_news["photo"])
        await asyncio.sleep(3600)  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –Ω–æ–≤–∏–Ω–æ—é

# === –°—Ç–∞—Ä—Ç / help ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –ø—Ä–∞—Ü—é—î. –ù–æ–≤–∏–Ω–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –Ω–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))

    # –§–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏–Ω
    app.job_queue.run_once(lambda _: asyncio.create_task(post_news_periodically(app)), when=1)

    app.run_polling()

if __name__ == "__main__":
    main()
